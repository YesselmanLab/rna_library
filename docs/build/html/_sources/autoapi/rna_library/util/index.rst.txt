:mod:`rna_library.util`
=======================

.. py:module:: rna_library.util

.. autoapi-nested-parse::

   Utility functions for the ``rna_library`` module



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   rna_library.util.satisfies_constraints
   rna_library.util.pool_with_distance
   rna_library.util.bp_codes_to_sequence
   rna_library.util.nt_codes_to_sequences
   rna_library.util.get_pair_list
   rna_library.util.connectivity_list
   rna_library.util.is_circular



.. function:: satisfies_constraints(sequence: str, template: str) -> bool

   Confirms whether a sequence and template are the same or not. A template has one of 6
   possible characters at each position: one of the normal A/C/G/U, N for "any" or "B" to indicate
   the position is meant to be part of a barcode. Will return ``False`` if sequence and template
   are not the same length.

   :param str sequence: sequence in question
   :param str template: templated sequence
   :rtype: bool


.. function:: pool_with_distance(sequences: List[str], min_dist: int) -> List[str]

   Creates a pool of sequences where each sequence has at least the specified Levenshtein distance between it and all other sequences.
   Method sorts sequences internally so input order is not relevant to final pool.

   .. warning:: This function can runs in polynomial time so large pools **WILL** take a significant amount of time to run. For reference, pools on the order of hundreds of thousands took multiple hours to run on an i7 in 2021.

   :param: list[str] sequences: A list of starting RNA sequences.
   :param: int min_dist: Minimum edit distance between each sequence in the pool. Must be >= 0.
   :rtype: list[str]


.. function:: bp_codes_to_sequence(bp_code) -> str

   Converts a list of :class:`BasePair()`'s into a sequence string.

   :param list[BasePair] bp_code: a list of basepairs to be converted. Basepairs are in order of nesting.
   :rtype: str


.. function:: nt_codes_to_sequences(codes) -> str

   Converts a list of :class:`Nucleotide()`'s into a sequence string.

   :param list[Nucleotide] codes: a list of nucleotides to be converted. 
   :rtype: str


.. function:: get_pair_list(secstruct: str) -> List[Tuple[int, int]]

   Creates a list of pairs of indices from a dot-bracket secstruct string. Note 
   that the function assumes the incoming structure is valid. 

   :param str secstruct: a dot-bracket structure which is assumed to be valid
   :rtype: list[tuple(int,int)]
   :raises TypeError: if the number of left parentheses exceeds the number of right parentheses


.. function:: connectivity_list(structure: str) -> List[int]

   Generates a connectivity list or pairmap from a dot-bracket secondary structure. 
   The list has a value of ``-1`` for unpaired positions else has the index of a 
   positions complement.

   :param str structure: a dot-bracket structure 
   :rtype: list[int]
   :raises TypeError: if the number of left parentheses exceeds the number of right parentheses


.. function:: is_circular(start: int, connections: List[int]) -> bool

   Checks if a starting point in a pairmap is in a circular portion.
   This can include the closing pairs of both hairpins and junctions.

   :param int start: staring index in the pairmap
   :param list[int] connections: pairmap generated from ``util.connectivity_list()``
   :rtype: bool


