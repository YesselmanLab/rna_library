:mod:`rna_library.motif`
========================

.. py:module:: rna_library.motif

.. autoapi-nested-parse::

   Motif classes that serve as the driver for this library's functionality.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rna_library.motif.Motif



Functions
~~~~~~~~~

.. autoapisummary::

   rna_library.motif.traverse
   rna_library.motif.highest_id



Attributes
~~~~~~~~~~

.. autoapisummary::

   rna_library.motif.ss


.. class:: Motif(**kwargs)


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: rna_library.motif.Motif
      :parts: 1
      :private-bases:

   Abstract base class that :class:`Hairpin()`, :class:`Helix()`, :class:`Junction()` and :class:`SingleStrand()` all inherit from.
       

   .. method:: link_children(self, depth: int = 0)

      Method used to link a :class:`Motif()` object to its children and vice versa. Should only be called once by the root :class:`Motif()`.

      :param int depth: depth of the current :class:`Motif()` object. defaults to 0
      :rtype: None


   .. method:: str(self) -> str

      Creates a recursive string representation of the current :class:`Motif()` object.

      :rtype: :class:`str()`


   .. method:: __eq__(self, other: Motif) -> bool

      Overloaded ``==`` operator for :class:`Motif()`. Requires that type of motif, sequence and token are identical.

      :param: `Motif()` other: Another :class:`Motif()` to be compared against.


   .. method:: __str__(self) -> str

      String representation of just the motif at hand.

      :return: The :class:`str()` representation of the :class:`Motif()`.
      :rtype: :class:`str()`


   .. method:: is_helix(self) -> bool

      If the motif is a helix or not. Overridden by child :class:`Helix()` class.

      :return: If the motif is of type :class:`Helix()`
      :rtype: :class:`bool()`


   .. method:: is_singlestrand(self) -> bool

      If the motif is a singlestrand or not. Overridden by child :class:`SingleStrand()` class.

      :return: If the motif is of type :class:`SingleStrand()`
      :rtype: :class:`bool()`


   .. method:: is_hairpin(self) -> bool

      If the motif is a hairpin or not. Overridden by child :class:`Hairpin()` class.

      :return: If the motif is of type :class:`Hairpin()`
      :rtype: :class:`bool()`


   .. method:: is_junction(self) -> bool

      If the motif is a junction or not. Overridden by child :class:`Junction()` class.

      :return: If the motif is of type :class:`Junction()`
      :rtype: :class:`bool()`


   .. method:: type(self) -> rna_library.util.MotifType

      Returns the :class:`MotifType()` type for the given motif.

      :return: The :class:`MotifType()` enum value for the given motif.
      :rtype: :class:`MotifType()`


   .. method:: children(self) -> rna_library.util.List[Motif]

      Getter for the :class:`Motif()`'s child motifs. Returned as a list for iteration. Only returns direct children or an empty list if the motif has not children.

      :return: A `list()` of :class:`Motif()` if the current :class:`Motif()` has any.
      :rtype: :class:`list[Motif]`


   .. method:: add_child(self, other: Motif) -> None

      Appends a new :class:`Motif()` to the internal list of children for the current :class:`Motif()`.

      .. warning:: Should **NOT** be called directly. Other function calls must occur to ensure that the internal graph is accurate.

      :param: `Motif()` other: Another :class:`Motif()` to be appended to the internal children list.


   .. method:: set_children(self, other: rna_library.util.List[Motif]) -> None

      Sets the entire list of `Motif()` to the internal list of children for the current :class:`Motif()`.

      .. warning:: Should **NOT** be called directly. Other function calls must occur to ensure that the internal graph is accurate.

      :param: `Motif()` other: Another :class:`Motif()` to be appended to the internal children list.


   .. method:: parent(self, other: Motif) -> None


   .. method:: parent(self) -> Motif


   .. method:: token(self, tk: str) -> None


   .. method:: token(self) -> str


   .. method:: structure(self, secstruct: str) -> None


   .. method:: structure(self) -> str


   .. method:: strands(self) -> rna_library.util.List[rna_library.util.List[int]]


   .. method:: sequence(self) -> str


   .. method:: sequence(self, seq: str) -> None


   .. method:: id(self) -> int


   .. method:: id(self, new_id: int) -> None


   .. method:: depth(self) -> int


   .. method:: depth(self, value: int) -> None


   .. method:: buffer(self) -> int
      :abstractmethod:


   .. method:: has_children(self) -> bool


   .. method:: has_parent(self) -> bool


   .. method:: recursive_sequence(self) -> str
      :abstractmethod:


   .. method:: recursive_structure(self) -> str
      :abstractmethod:


   .. method:: has_non_canonical(self) -> bool
      :abstractmethod:


   .. method:: same_pattern(self, sequence: str) -> bool


   .. method:: start_pos(self) -> int


   .. method:: end_pos(self) -> int


   .. method:: contains(self, pos: int) -> bool


   .. method:: sequences(self, seqs)


   .. method:: number_sequences(self)


   .. method:: set_sequence(self, idx)


   .. method:: generate_sequences(self)
      :abstractmethod:



.. function:: traverse(motif)


.. function:: highest_id(m: Motif, best=0)


.. data:: ss
   :annotation: = ..(((...)))......

   

