:mod:`rna_library`
==================

.. py:module:: rna_library


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   barcode/index.rst
   demo/index.rst
   design/index.rst
   enums/index.rst
   hairpin/index.rst
   helix/index.rst
   junction/index.rst
   library/index.rst
   motif/index.rst
   parser/index.rst
   secstruct/index.rst
   singlestrand/index.rst
   util/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   rna_library.BasePair
   rna_library.Nucleotide
   rna_library.MotifType
   rna_library.Motif
   rna_library.Helix
   rna_library.Hairpin
   rna_library.Junction
   rna_library.SingleStrand
   rna_library.SecStruct



Functions
~~~~~~~~~

.. autoapisummary::

   rna_library.parse_to_motifs
   rna_library.build_barcodes



Attributes
~~~~~~~~~~

.. autoapisummary::

   rna_library.__author__
   rna_library.__email__
   rna_library.__version__
   rna_library.ALLOWED_PAIRS
   rna_library.BPS
   rna_library.LEGAL_BPS
   rna_library.NTS
   rna_library.BP_VALS
   rna_library.BASEPAIR_MAPPER
   rna_library.NT_VALS
   rna_library.NUCLEOTIDE_MAPPER
   rna_library.TYPE_MAPPER


.. data:: __author__
   :annotation: = Chris Jurich

   

.. data:: __email__
   :annotation: = cjurich2@huskers.unl.edu

   

.. data:: __version__
   :annotation: = 0.1.0

   

.. data:: ALLOWED_PAIRS
   

   A :class:`set()` containing all 6 canonical and wobble basepairings.


.. data:: BPS
   :annotation: = ['GU', 'UG', 'AU', 'UA', 'GC', 'CG']

   A :class:`tuple()` of allowed canonical and wobble basepairings.
   Ordered for easy conversion by the :class:`BasePair()` class.


.. data:: LEGAL_BPS
   

   A :class:`set()` of all 4 allowed nucleotide types.


.. data:: NTS
   :annotation: = ['A', 'C', 'G', 'U']

   A :class:`tuple()` of all 4 canonical nucleotide types. Ordered 
   for each conversion by the :class:`Nucleotide()` class.


.. class:: BasePair


   Bases: :py:obj:`enum.IntEnum`

   Enumerated type for canoncial and wobble basepairs.

   .. attribute:: GU
      :annotation: = [0]

      

   .. attribute:: UG
      :annotation: = [1]

      

   .. attribute:: AU
      :annotation: = [2]

      

   .. attribute:: UA
      :annotation: = [3]

      

   .. attribute:: GC
      :annotation: = [4]

      

   .. attribute:: CG
      :annotation: = 5

      

   .. method:: is_GU(self)

      :return: If the instance is a UG or GU pair.
      :rtype: :class:`bool()`


   .. method:: is_AU(self)

      :return: If the instance is a UA or AU pair.
      :rtype: :class:`bool()`


   .. method:: is_GC(self)

      :return: If the instance is a CG or GC pair.
      :rtype: :class:`bool()`


   .. method:: is_canoncial(self)

      :return: If the instance is a canonical Watson-Crick basepair.
      :rtype: :class:`bool()`


   .. method:: to_str(self)

      :return: The :class:`BasePair()` instance in text form.
      :rtype: :class:`str()`



.. data:: BP_VALS
   

   A :class:`list()` that contains the integer values for all of the 
   :class:`BasePair()` enumerations.


.. data:: BASEPAIR_MAPPER
   

   A :class:`dict()` object that maps a canonical basepair to its
   :class:`BasePair()` value.


.. class:: Nucleotide


   Bases: :py:obj:`enum.IntEnum`

   Enumerated type for all nucleotide types.

   .. attribute:: A
      :annotation: = [0]

      

   .. attribute:: C
      :annotation: = [1]

      

   .. attribute:: G
      :annotation: = [2]

      

   .. attribute:: U
      :annotation: = 3

      

   .. method:: to_str(self)

      :return: The :class:`Nucleotide()` instance in text form.
      :rtype: :class:`str()`



.. data:: NT_VALS
   

   A :class:`list()` that contains the integer values for all of the 
   :class:`Nucleotide()` enumerations.


.. data:: NUCLEOTIDE_MAPPER
   

   A :class:`dict()` object that maps a canoncial nucleotide to its
   :class:`Nucleotide()` value.


.. class:: MotifType


   Bases: :py:obj:`enum.IntEnum`

   Enumerated type for all motif types 

   .. attribute:: UNASSIGNED
      :annotation: = 0

      

   .. attribute:: SINGLESTRAND
      :annotation: = 1

      

   .. attribute:: HELIX
      :annotation: = 2

      

   .. attribute:: HAIRPIN
      :annotation: = 3

      

   .. attribute:: JUNCTION
      :annotation: = 4

      


.. data:: TYPE_MAPPER
   

   A :class: `dict()` object that maps a :class: `MotifType` to its value
   as a `str().`


.. class:: Motif(**kwargs)


   Bases: :py:obj:`abc.ABC`

   Abstract base class that :class:`Hairpin()`, 
   :class:`Helix()`,
   :class:`Junction()` and
   :class:`SingleStrand()`
   all inherit from.

   .. method:: link_children(self, depth: int = 0)

      Method used to link a :class:`Motif()` object to its children and vice versa. Should only be called once by the root :class:`Motif()`.

      :param int depth: depth of the current :class:`Motif()` object. defaults to 0
      :rtype: None


   .. method:: str(self) -> str

      Creates a recursive string representation of the current :class:`Motif()` object.

      :rtype: :class:`str()`


   .. method:: __eq__(self, other) -> bool

      Overloaded ``==`` operator for :class:`Motif()`. Requires that type of motif, sequence and token are identical.

      :param: `Motif()` other: Another :class:`Motif()` to be compared against.


   .. method:: __str__(self) -> str

      String representation of just the motif at hand.

      :return: The :class:`str()` representation of the :class:`Motif()`.
      :rtype: :class:`str()`


   .. method:: is_helix(self)


   .. method:: is_singlestrand(self)


   .. method:: is_hairpin(self)


   .. method:: is_junction(self)


   .. method:: type(self)


   .. method:: children(self)


   .. method:: add_child(self, other)


   .. method:: set_children(self, other)


   .. method:: parent(self, other=None)


   .. method:: token(self, tk=None)


   .. method:: structure(self, secstruct=None)


   .. method:: strands(self)


   .. method:: sequence(self)


   .. method:: sequence(self, seq)


   .. method:: id(self)


   .. method:: id(self, new_id)


   .. method:: depth(self)


   .. method:: depth(self, value)


   .. method:: buffer(self)
      :abstractmethod:


   .. method:: has_children(self)


   .. method:: has_parent(self)


   .. method:: recursive_sequence(self)
      :abstractmethod:


   .. method:: recursive_structure(self)
      :abstractmethod:


   .. method:: has_non_canonical(self)
      :abstractmethod:


   .. method:: same_pattern(self, sequence)


   .. method:: start_pos(self)


   .. method:: end_pos(self)


   .. method:: contains(self, pos)


   .. method:: sequences(self, seqs)


   .. method:: number_sequences(self)


   .. method:: set_sequence(self, idx)


   .. method:: generate_sequences(self)
      :abstractmethod:



.. class:: Helix(**kwargs)


   Bases: :py:obj:`rna_library.motif.Motif`

   Abstract base class that :class:`Hairpin()`, 
   :class:`Helix()`,
   :class:`Junction()` and
   :class:`SingleStrand()`
   all inherit from.

   .. method:: size(self)


   .. method:: size(self, val)


   .. method:: buffer(self)


   .. method:: pairs(self)


   .. method:: is_helix(self)


   .. method:: recursive_structure(self)


   .. method:: recursive_sequence(self)


   .. method:: has_non_canonical(self)


   .. method:: generate_sequences(self)



.. class:: Hairpin(**kwargs)


   Bases: :py:obj:`rna_library.motif.Motif`

   Abstract base class that :class:`Hairpin()`, 
   :class:`Helix()`,
   :class:`Junction()` and
   :class:`SingleStrand()`
   all inherit from.

   .. method:: buffer(self)


   .. method:: is_hairpin(self)


   .. method:: recursive_structure(self)


   .. method:: recursive_sequence(self)


   .. method:: has_non_canonical(self)


   .. method:: generate_sequences(self)



.. class:: Junction(**kwargs)


   Bases: :py:obj:`rna_library.motif.Motif`

   Abstract base class that :class:`Hairpin()`, 
   :class:`Helix()`,
   :class:`Junction()` and
   :class:`SingleStrand()`
   all inherit from.

   .. method:: buffer(self)


   .. method:: gaps(self)


   .. method:: is_junction(self)


   .. method:: recursive_structure(self)


   .. method:: recursive_sequence(self)


   .. method:: closing_pairs(self)


   .. method:: has_non_canonical(self)


   .. method:: number_branches(self)


   .. method:: symmetric(self)


   .. method:: generate_sequences(self)



.. class:: SingleStrand(**kwargs)


   Bases: :py:obj:`rna_library.motif.Motif`

   Abstract base class that :class:`Hairpin()`, 
   :class:`Helix()`,
   :class:`Junction()` and
   :class:`SingleStrand()`
   all inherit from.

   .. method:: buffer(self)


   .. method:: is_singlestrand(self)


   .. method:: recursive_structure(self)


   .. method:: recursive_sequence(self)


   .. method:: has_non_canonical(self)


   .. method:: generate_sequences(self)



.. function:: parse_to_motifs(structure: str, sequence: str) -> rna_library.motif.Motif


.. class:: SecStruct(secstruct: str, sequence: str)


   .. method:: set_ids_(self, m: rna_library.motif.Motif)


   .. method:: display(self)


   .. method:: sequence(self)
      :property:


   .. method:: structure(self)
      :property:


   .. method:: helix_replace_(self, id, secstruct, sequence)


   .. method:: motif_replace_(self, id, new_secstruct, new_sequence)


   .. method:: change_motif(self, id, new_secstruct, new_sequence)


   .. method:: get_sequence_structure(self)


   .. method:: _get_ids_internal(self, m, ids, mtype)


   .. method:: get_ids(self, motif_type)


   .. method:: get_motif(self, id) -> rna_library.motif.Motif


   .. method:: get_substructure(self, id1, id2=None)


   .. method:: get(self, id)


   .. method:: __iter__(self)


   .. method:: hairpins(self, **kwargs)


   .. method:: helix(self)


   .. method:: junctions(self)


   .. method:: singlestrands(self)


   .. method:: set_barcode(self, m_id, bc_seq)


   .. method:: __add__(self, other)



.. function:: build_barcodes(secstruct: str, start: Union[str, None] = None, distance: int = 3)


