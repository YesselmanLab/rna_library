:mod:`rna_library`
==================

.. py:module:: rna_library


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   core/index.rst
   design/index.rst
   processing/index.rst
   structure/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   rna_library.BasePair
   rna_library.Nucleotide
   rna_library.MotifType
   rna_library.Motif
   rna_library.Helix
   rna_library.Hairpin
   rna_library.Junction
   rna_library.SingleStrand
   rna_library.SecStruct
   rna_library.JunctionData
   rna_library.JunctionEntry



Functions
~~~~~~~~~

.. autoapisummary::

   rna_library.parse_to_motifs
   rna_library.highest_id
   rna_library.build_react_df
   rna_library.build_motif_df
   rna_library.normalize_hairpin
   rna_library.normalize_coeff_fit
   rna_library.build_barcodes


.. data:: __author__
   :annotation: = Chris Jurich

   

.. data:: __email__
   :annotation: = cjurich2@huskers.unl.edu

   

.. data:: __version__
   :annotation: = 0.1.0

   

.. data:: ALLOWED_PAIRS
   

   A :class:`set()` containing all 6 canonical and wobble basepairings.


.. data:: BPS
   :annotation: = ['GU', 'UG', 'AU', 'UA', 'GC', 'CG']

   A :class:`tuple()` of allowed canonical and wobble basepairings.
   Ordered for easy conversion by the :class:`BasePair()` class.


.. data:: LEGAL_BPS
   

   A :class:`set()` of all 4 allowed nucleotide types.


.. data:: NTS
   :annotation: = ['A', 'C', 'G', 'U']

   A :class:`tuple()` of all 4 canonical nucleotide types. Ordered 
   for each conversion by the :class:`Nucleotide()` class.


.. py:class:: BasePair

   Bases: :class:`enum.IntEnum`

   .. autoapi-inheritance-diagram:: rna_library.BasePair
      :parts: 1
      :private-bases:

   Enumerated type for canoncial and wobble basepairs.

   .. attribute:: GU
      :annotation: = 0

      

   .. attribute:: UG
      :annotation: = 1

      

   .. attribute:: AU
      :annotation: = 2

      

   .. attribute:: UA
      :annotation: = 3

      

   .. attribute:: GC
      :annotation: = 4

      

   .. attribute:: CG
      :annotation: = 5

      

   .. method:: is_GU(self)

      :return: If the instance is a UG or GU pair.
      :rtype: :class:`bool()`


   .. method:: is_AU(self)

      :return: If the instance is a UA or AU pair.
      :rtype: :class:`bool()`


   .. method:: is_GC(self)

      :return: If the instance is a CG or GC pair.
      :rtype: :class:`bool()`


   .. method:: is_canoncial(self)

      :return: If the instance is a canonical Watson-Crick basepair.
      :rtype: :class:`bool()`


   .. method:: to_str(self)

      :return: The :class:`BasePair()` instance in text form.
      :rtype: :class:`str()`



.. data:: BP_VALS
   

   A :class:`list()` that contains the integer values for all of the 
   :class:`BasePair()` enumerations.


.. data:: BASEPAIR_MAPPER
   

   A :class:`dict()` object that maps a canonical basepair to its
   :class:`BasePair()` value.


.. py:class:: Nucleotide

   Bases: :class:`enum.IntEnum`

   .. autoapi-inheritance-diagram:: rna_library.Nucleotide
      :parts: 1
      :private-bases:

   Enumerated type for all nucleotide types.

   .. attribute:: A
      :annotation: = [0]

      

   .. attribute:: C
      :annotation: = [1]

      

   .. attribute:: G
      :annotation: = [2]

      

   .. attribute:: U
      :annotation: = 3

      

   .. method:: to_str(self)

      :return: The :class:`Nucleotide()` instance in text form.
      :rtype: :class:`str()`



.. data:: NT_VALS
   

   A :class:`list()` that contains the integer values for all of the 
   :class:`Nucleotide()` enumerations.


.. data:: NUCLEOTIDE_MAPPER
   

   A :class:`dict()` object that maps a canoncial nucleotide to its
   :class:`Nucleotide()` value.


.. py:class:: MotifType

   Bases: :class:`enum.IntEnum`

   .. autoapi-inheritance-diagram:: rna_library.MotifType
      :parts: 1
      :private-bases:

   Enumerated type for all motif types 

   .. attribute:: UNASSIGNED
      :annotation: = 0

      

   .. attribute:: SINGLESTRAND
      :annotation: = 1

      

   .. attribute:: HELIX
      :annotation: = 2

      

   .. attribute:: HAIRPIN
      :annotation: = 3

      

   .. attribute:: JUNCTION
      :annotation: = 4

      


.. data:: TYPE_MAPPER
   

   A :class: `dict()` object that maps a :class: `MotifType` to its value
   as a `str().`


.. py:class:: Motif(**kwargs)

   Bases: :class:`abc.ABC`

   .. autoapi-inheritance-diagram:: rna_library.Motif
      :parts: 1
      :private-bases:

   Abstract base class that :class:`Hairpin()`, :class:`Helix()`, :class:`Junction()` and :class:`SingleStrand()` all inherit from.

   .. method:: link_children(self, depth: int = 0)

      Method used to link a :class:`Motif()` object to its children and vice versa. Should only be called once by the root :class:`Motif()`.

      :param int depth: depth of the current :class:`Motif()` object. defaults to 0
      :rtype: None


   .. method:: str(self) -> str

      Creates a recursive string representation of the current :class:`Motif()` object.

      :rtype: :class:`str()`


   .. method:: __eq__(self, other: Motif) -> bool

      Overloaded ``==`` operator for :class:`Motif()`. Requires that type of motif, sequence and token are identical.

      :param Motif other: Another :class:`Motif()` to be compared against.


   .. method:: __str__(self) -> str

      String representation of just the motif at hand.

      :return: The :class:`str()` representation of the :class:`Motif()`.
      :rtype: :class:`str()`


   .. method:: is_helix(self) -> bool

      If the motif is a helix or not. Overridden by child :class:`Helix()` class.

      :return: If the motif is of type :class:`Helix()`
      :rtype: :class:`bool()`


   .. method:: is_singlestrand(self) -> bool

      If the motif is a singlestrand or not. Overridden by child :class:`SingleStrand()` class.

      :return: If the motif is of type :class:`SingleStrand()`
      :rtype: :class:`bool()`


   .. method:: is_hairpin(self) -> bool

      If the motif is a hairpin or not. Overridden by child :class:`Hairpin()` class.

      :return: If the motif is of type :class:`Hairpin()`


   .. method:: is_junction(self) -> bool

      If the motif is a junction or not. Overridden by child :class:`Junction()` class.

      :return: If the motif is of type :class:`Junction()`
      :rtype: :class:`bool()`


   .. method:: type(self) -> MotifType

      Returns the :class:`MotifType()` type for the given motif.

      :return: The :class:`MotifType()` enum value for the given motif.
      :rtype: :class:`MotifType()`


   .. method:: children(self) -> List[Motif]

      Getter for the :class:`Motif()`'s child motifs. Returned as a list for iteration. Only returns direct children or an empty list if the motif has not children.

      :return: A :class:`list()` of :class:`Motif()` if the current :class:`Motif()` has any.
      :rtype: :class:`list[Motif]`


   .. method:: add_child(self, other: Motif) -> None

      Appends a new :class:`Motif()` to the internal list of children for the current :class:`Motif()`.

      .. warning:: Should **NOT** be called directly. Other function calls must occur to ensure that the internal graph is accurate.

      :param: Motif other: Another :class:`Motif()` to be appended to the internal children list.


   .. method:: set_children(self, other: List[Motif]) -> None

      Sets the entire list of `Motif()` to the internal list of children for the current :class:`Motif()`.

      .. warning:: Should **NOT** be called directly. Other function calls must occur to ensure that the internal graph is accurate.

      :param  List[Motif] other: Another :class:`Motif()` to be appended to the internal children list.


   .. method:: parent(self, other)

      Sets the :class:`Motif()`'s parent to the supplied :class:`Motif()`. 

      :param Motif other: The new parent for the current :class:`Motif()`.

      :return: None
      :rtype: NoneType


   .. method:: parent(self)

      Gets the parent :class:`Motif()`'s for the current :class:`Motif()`. 

      :return: the parent motif 
      :rtype: :class:`Motif()`


   .. method:: token(self, tk)

      Sets the :class:`Motif()`'s identifying token to an inputted string. Input is **NOT** validated.

      :param str tk: the new token for the :class:`Motif()`.

      :return: None
      :rtype: NoneType


   .. method:: token(self)

      Gets the identifying token for the :class:`Motif()`.

      :return: token
      :rtype: str


   .. method:: structure(self, secstruct)

      Sets the :class:`Motif()`'s structure to an inputted string. Input is **NOT** validated.

      :param str tk: the new structure for the :class:`Motif()`.

      :return: None
      :rtype: NoneType


   .. method:: structure(self)

      Gets the secondary structure for the :class:`Motif()`.

      :return: token
      :rtype: str


   .. method:: strands(self) -> List[List[int]]

      Returns a list of list of :class:`int()`'ss where each sub list contains a contiguous set of nucleotides that "belong" to the :class:`Motif()`.
      Output varies by motif type and the expected values are below:

      - :class:`Hairpin()` => 1
      - :class:`Helix()` => 2
      - :class:`SingleStrand()` => 1
      - :class:`Junction()` => number of branches in :class:`Junction()`

      :return: strands
      :rtype: List[List[int]]


   .. method:: sequence(self)

      Gets the sequence for the :class:`Motif()`. 
      Because the nucleotides owned by the :class:`Motif()` may not be contiguous, breaks will 
      be separated by an ampersand '&'. 

      :return: sequence
      :rtype: str


   .. method:: sequence(self, seq)

      Sets the sequence for the :class:`Motif()` to the supplied string. Warning the input **NOT** validated.

      :param str seq: the new sequence for the :class:`Motif()`. 


   .. method:: id(self)

      Gets the id :class:`int` value for the given :class:`Motif()`.

      :return: id
      :rtype: int


   .. method:: id(self, new_id)

      Sets the id for the :class:`Motif()`. Warning: It is **NOT** currently validated.

      :param int new_id: the new id for the :class:`Motif()`
      :return: none
      :rtype: NoneType


   .. method:: depth(self)

      The depth of the :class:`Motif()`, which describes how deep it is in the internal graph.

      :return: depth
      :rtype: int


   .. method:: depth(self, value)

      Sets the depth of the current :class:`Motif()`. 

      :param int value: the new depth value for the current :class:`Motif()`.


   .. method:: buffer(self) -> int
      :abstractmethod:

      Buffer refers to the size of the closest adjacent :motif:`Helix()`.
      Varies by type of motif as seen below:

      - :class:`Helix()` => size of the helix itself
      - :class:`Hairpin()` =>  size of its parent helix
      - :class:`SingleStrand()` => -1, meaningless in this context
      - :class:`Junction()` => a :class:`list()` of the branching helices' length with the parent helix going first the in the direction of increasing nucleotide index.

      :return: buffer
      :rtype: int


   .. method:: has_children(self) -> bool

      Returns whether the :class:`Motif()` has any children.

      :return:  has_children
      :rtype: bool 


   .. method:: has_parent(self) -> bool

      Returns whether the :class:`Motif()` has a parent.

      :return: has_parent
      :rtype: bool


   .. method:: recursive_sequence(self) -> str
      :abstractmethod:

      Builds and returns the continguous sequence of the structure viewing the current
      :class:`Motif()` as the root of the structure. The returned sequence will be part of 
      the main sequence.

      :return: sequence
      :rtype: str


   .. method:: recursive_structure(self) -> str
      :abstractmethod:

      Builds and returns the continguous structure of the structure viewing the current
      :class:`Motif()` as the root of the structure. The returned structure will be part of 
      the main structure.

      :return: structure
      :rtype: str


   .. method:: has_non_canonical(self) -> bool
      :abstractmethod:

      Checks if the :class:`Motif()` has any non-canonical (i.e. non AU/UA, UG/GU or GC/CG) pairings.

      :return: has_nc
      :rtype: bool


   .. method:: same_pattern(self, sequence: str) -> bool

      Checks if a template sequence is compatible with an inputted sequence. Specifically if the length
      and placement of '&' are the same.

      :param str sequence: template string to compare against.

      :return: is_same
      :rtype: bool


   .. method:: start_pos(self) -> int

      Starting (or lowest) nucleotide index owned by the :class:`Motif()`.

      :return: start_pos
      :rtype: int


   .. method:: end_pos(self) -> int

      Ending (or highest) nucleotide index owned by the :class:`Motif()`.

      :return: end_pos
      :rtype: int


   .. method:: contains(self, pos: int) -> bool

      Indicates if a nucleotide index is contained or belongs to the current :class:`Motif()`.

      :param list[int] pos: the querying index

      :return: is_contained
      :rtype: bool


   .. method:: sequences(self, seqs: List[str]) -> None

      Used to set the internal list of barcode temp sequences.

      :param List[str] seqs: the new barcode sequences to be applied to the current :class:`Motif()`.


   .. method:: number_sequences(self) -> int

      Gives the number of barcode sequences that the :class:`Motif()` currently has.

      :return: num_sequence
      :rtype: int


   .. method:: set_sequence(self, idx: int) -> None

      Sets the current sequence to the sequence of the existing index from the internal barcodes list.
      Note that the `Motif.number_sequences()` method should be queried prior so that the index call will
      be known to be valid.

      :param int idx: The index to be used. 


   .. method:: generate_sequences(self)
      :abstractmethod:

      Builds out all possible barcode sequences that fit the known constraints.


   .. method:: is_barcode(self) -> bool

      Returns whether the current :class:`Motif()` serves as a barcode.

      :return: is_barcode
      :rtype: bool



.. py:class:: Helix(**kwargs)

   Bases: :class:`rna_library.structure.motif.Motif`

   .. autoapi-inheritance-diagram:: rna_library.Helix
      :parts: 1
      :private-bases:

   Represents a helix or stack in an RNA structure. Inherits from :class:`Motif()`.

   .. method:: size(self) -> int

      Returns the size of the :class:`Helix()` which is just the number of 
      pairs in the stack.

      :return: size
      :rtype: int


   .. method:: size(self, val)

      Sets the current size for the :class:`Helix()`. 

      :param int val: the new size of the helix.


   .. method:: buffer(self)

      Returns the buffer of the :class:`Helix()` which is just the number of 
      pairs in the stack.

      :return: buffer
      :rtype: int


   .. method:: pairs(self) -> List[str]

      Returns the basepairs in the stack as a list of strings of length 2.
      Pairs are returned in order of lowest 3 prime starting index. 

      :return: pairs
      :rtype: List[str]


   .. method:: is_helix(self)

      Indicates that the :class:`Motif()` is of type :class:`Helix()`.

      :return: is_helix
      :rtype: bool


   .. method:: recursive_structure(self)

      Builds and returns the continguous sequence of the structure viewing the current
      :class:`Motif()` as the root of the structure. The returned sequence will be part of 
      the main sequence.

      :return: sequence
      :rtype: str


   .. method:: recursive_sequence(self)

      Builds and returns the continguous structure of the structure viewing the current
      :class:`Motif()` as the root of the structure. The returned structure will be part of 
      the main structure.

      :return: structure
      :rtype: str


   .. method:: has_non_canonical(self)

      Checks if any of the basepairs are non-canonical (i.e. non- AU/UA, GU/UG, GC/CG).

      :return: has_non_canonical
      :rtype: bool


   .. method:: generate_sequences(self)

      Generates all possible sequences for the :class:`Helix()` that are compatible with
      the constraints for the motif.



.. py:class:: Hairpin(**kwargs)

   Bases: :class:`rna_library.structure.motif.Motif`

   .. autoapi-inheritance-diagram:: rna_library.Hairpin
      :parts: 1
      :private-bases:

   Represents a hairpin loop in an RNA structure. Inherits from :class:`Motif()`.

   .. method:: buffer(self) -> int

      For the :class:`Hairpin()` type, this is simply the size of the 
      closing helix meaning the number of closing pairs.

      :return: buffer
      :rtype: int


   .. method:: is_hairpin(self) -> bool

      Indicates that the :class:`Motif()` is of type :class:`Hairpin()`.

      :return: is_hairpin
      :rtype: bool


   .. method:: recursive_structure(self) -> str

      Returns the owned portion of the structure. In this coding of structure 
      it is just the loop portion and does not include the closing pair.

      :return: recursive_structure
      :rtype: str


   .. method:: recursive_sequence(self) -> str

      Returns the owned portion of the sequence. In this coding of sequence 
      it is just the loop portion and does not include the closing pair.

      :return: recursive_sequence
      :rtype: str


   .. method:: has_non_canonical(self) -> bool

      Returns whether or not the closing pair is canonical (i.e. is AU/UA, CG/GC, GU/UG).

      :return: has_non_canonical
      :rtype: bool


   .. method:: generate_sequences(self)

      Generates all possible sequences for the :class:`Hairpin()` that are compatible with
      the constraints for the motif.



.. py:class:: Junction(**kwargs)

   Bases: :class:`rna_library.structure.motif.Motif`

   .. autoapi-inheritance-diagram:: rna_library.Junction
      :parts: 1
      :private-bases:

   Represents a junction of any size in an RNA structure including bulges and multi-loops.    

   .. method:: dms_active_idxs(self)


   .. method:: buffer(self) -> List[int]

      For the :class:`Junction()` type this is a :class:`list()` of :class:`int()`'s where the first
      is the size of the parent :class:`Helix()` and then they are arranged in 3' to 5' order.
      Will have the same size as number of branches in the :class:`Jucntion()`.

      :return: buffers
      :rtype: List[int]


   .. method:: gaps(self) -> List[int]

      Returns a :class:`list()` of :class:`int()`'s of gap sizes in 3' to 5' order.
      Will have the same size as number of branches in the :class:`Jucntion()`.

      :return: gaps
      :rtype: List[int]


   .. method:: is_junction(self) -> bool

      Indicates that the :class:`Motif()` is of type :class:`Junction()`.

      :return: is_hairpin
      :rtype: bool


   .. method:: recursive_structure(self) -> str

      Returns the owned portion of the structure. In this coding of structure 
      it is the closing pairs as well as the child :class:`Helix()`'s and their children.

      :return: recursive_structure
      :rtype: str


   .. method:: recursive_sequence(self) -> str

      Returns the owned portion of the sequence. In this coding of structure 
      it is the closing pairs as well as the child :class:`Helix()`'s and their children.

      :return: recursive_sequence
      :rtype: str


   .. method:: closing_pairs(self) -> List[str]

      Returns a :class:`list()` of :class:`str()`'s that correspond to the closing pairs in 
      the :class:`Junction()` Motif. 

      :return: closing_pairs
      :rtype: List[str]


   .. method:: has_non_canonical(self) -> bool

      Returns whether or not any of the closing pairs are non-canonical (i.e. not AU/UA, CG/GC, GU/UG).

      :return: has_non_canonical
      :rtype: bool


   .. method:: number_branches(self) -> int

      Returns the number of branches in the current :class:`Junction()`.

      :return: number_branches
      :rtype: int


   .. method:: symmetric(self) -> bool

      Indicates if the current :class:`Junction()` is symmetric, that is the sizes of all of the 
      gaps are the same.

      :return: is_symmetric
      :rtype: bool


   .. method:: generate_sequences(self)

      Would generate all possible sequences for the :class:`Junction()` that are compatible with
      the constraints for the motif. **Not currently implemented.**

      :raises: TypeError



.. py:class:: SingleStrand(**kwargs)

   Bases: :class:`rna_library.structure.motif.Motif`

   .. autoapi-inheritance-diagram:: rna_library.SingleStrand
      :parts: 1
      :private-bases:

   Represents a single stranded region in an RNA structure. Does not include unpaired regions that are part of a :class:`Junction()` or :class:`Helix()`.

   .. method:: buffer(self) -> int

      For the :class:`SingleStrand()` type, this does not have any meaning and is always the value 
      ``-1``.

      :return: buffer
      :rtype: int


   .. method:: is_singlestrand(self) -> bool

      Indicates that the :class:`Motif()` is of type :class:`SingleStrand()`.

      :return: is_singlestrand 
      :rtype: bool


   .. method:: recursive_structure(self) -> str

      Returns the owned portion of the structure. In this coding of structure 
      it is just the nucleotides in the single strand plus its child if it exists.

      :return: recursive_structure
      :rtype: str


   .. method:: recursive_sequence(self) -> str

      Returns the owned portion of the sequence. In this coding of sequence 
      it is just the nucleotides in the single strand plus its child if it exists.

      :return: recursive_sequence
      :rtype: str


   .. method:: has_non_canonical(self)

      Because there are no pairs "owned" by :class:`SingleStrand()`'s, it always returns ``False``.

      :return: has_non_canonical
      :rtype: bool


   .. method:: generate_sequences(self)

      Generates all possible sequences for the :class:`SingleStrand()` that are compatible with
      the constraints for the motif.



.. py:class:: SecStruct(secstruct: str, sequence: str)

   Represents a 

   .. method:: set_ids_(self, m: Motif)


   .. method:: display(self)


   .. method:: sequence(self)
      :property:


   .. method:: structure(self)
      :property:


   .. method:: helix_replace_(self, id, secstruct, sequence)


   .. method:: motif_replace_(self, id, new_secstruct, new_sequence)


   .. method:: change_motif(self, id, new_secstruct, new_sequence)


   .. method:: get_sequence_structure(self)


   .. method:: _get_ids_internal(self, m, ids, mtype)


   .. method:: get_ids(self, motif_type)


   .. method:: get_motif(self, id) -> Motif


   .. method:: get_substructure(self, id1, id2=None)


   .. method:: get(self, id)


   .. method:: __iter__(self)


   .. method:: itermotifs(self)


   .. method:: hairpins(self, **kwargs)


   .. method:: helix(self)


   .. method:: junctions(self)


   .. method:: singlestrands(self)


   .. method:: set_barcode(self, m_id, bc_seq)


   .. method:: __add__(self, other)



.. function:: parse_to_motifs(structure: str, sequence: str) -> Motif

   Method takes a structure sequence pair and returns a root :class:`Motif()` with a complete associated graph.

   :param str structure: a valid dot-bracket structure 
   :param str sequence: the corresponding sequence composed of the alphabet [ACGUTNB] 

   :return: motif
   :rtype: Motif


.. function:: highest_id(m: Motif, best: int = 0) -> int

   Figures out the highest id number in a given :class:`Motif()` graph.

   :param Motif m: motif to start the query on
   :param int best: current highest or "best" motif id at that recursion level. 

   :return: highest_id
   :rtype: int


.. py:class:: JunctionData(**kwargs)

   Composite class that represents a collection of JunctionEntry objects in an experiment.

   .. method:: get_active_data(self)


   .. method:: rebuild_data(self) -> None

      Method that rebuilds the internal data representation from the JunctionEntry objects.

      :rtype: NoneType


   .. method:: is_symmetrical(self)

      Getter that tells if the current JunctionData object models a symmetrical junction.
      :rtype: bool


   .. method:: plot(self, plot_dir: str, overwrite=False) -> None

      Method that saves a plot of the JunctionData's data points to the supplied directory. 

      :param: str plot_dir: The directory where the plot will be saved. Does not have to exist.
      :rtype: NoneType


   .. method:: show(self) -> None

      Method that brings up a plot of the JunctionData's data points

      :rtype: NoneType


   .. method:: bind(self, ax: matplotlib.axes.Axes) -> None

      Method that binds the JunctionData points to a supplied matplotlib Axes object.

      :param: matplotlib.axes.Axes ax: the Axes object which the plot will be bound to
      :rtype: NoneType


   .. method:: measure_variance(self) -> Dict[str, float]



.. py:class:: JunctionEntry(**kwargs)

   Represents a single junction entry from an RNA construct

   .. method:: validate_arguments_(self)

      Helper method that validates arguments in the constructor.


   .. method:: key(self) -> Tuple[str, str]

      Getter that accesses the (sequence, structure) key for the JunctionEntry

      :rtype: Tuple[str,str]


   .. method:: is_symmetrical(self) -> bool

      Getter that checks if the JunctionEntry is for a symmetrical unction.


   .. method:: __getitem__(self, idx: int) -> float



.. function:: build_react_df(**kwargs) -> pd.DataFrame

   Builds the reactivity dataframe from the supplied arguments. Here each row reprsents a construct.
       Note that all arguments are supplied as kwargs.

   :params: str out_dir: base output directory where rna_library.process_histos was called
       :params: str start_seq: common start sequence for the RNA constructs
   :params: str end_seq: common end sequence for the RNA constructs
   :params: str fasta_file: path to the fast file for the construct
   :params: str histos_file: path to histogram file from DREEM analysis
       :rtype: pd.DataFrame


.. function:: build_motif_df(df: pd.DataFrame) -> pd.DataFrame

   Function that creates a motif dataframe from a reactivity dataframe. Here each row represents a Motif.

   :param: pd.DataFrame df: reactivity dataframe which is generated from build_react_df()
       :rtype: pd.DataFrame


.. function:: normalize_hairpin(df: pd.DataFrame, seq: str, ss: str, **kwargs) -> List[List[float]]

   Normalizes a reactivity pattern to a normalization hairpin. Creates fully normalize values
   for an entire pd.DataFrame

   :param: pd.DataFrame df: reactivity_df created from rna_library.build_react_df 
   :param: str seq: reference hairpin sequence
   :param: str ss: reference hairpin structure
   :param: float factor: factor to set the hairpin values to, is a keyword argument
   :param: str nts: string of nucleotide's to be used for calc, is a keywrod argument


.. function:: normalize_coeff_fit(reactivity_df)


.. function:: build_barcodes(secstruct: str, start: Union[str, None] = None, distance: int = 3)


